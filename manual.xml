<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
		<meta charset='utf-8' /> 
		<title>gamelab</title>
		<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet" />
		<link rel="stylesheet" href="manual.css" type="text/css" />
	</head>
	<body>
		<header>
			<h1><a href="index.html">gamelab</a></h1>
		</header>
		<nav>
			<span>Version @VERSION@</span>
			<span>
				<span>Contact</span>
				<a title="Contact" href="mailto:kristaps@kcons.eu"><i class="fa fa-envelope-o"></i></a>
			</span>
			<span>
				<span>Sources</span>
				<a title="Source Code" href="snapshots/gamelab.tgz"><i class="fa fa-gears"></i></a>
				<a title="Source Checksum" href="snapshots/gamelab.tgz.sha512"><i class="fa fa-lock"></i></a>
				<a title="Source Archive" href="snapshots"><i class="fa fa-archive"></i></a>
			</span>
			<span>
				<span>Cite</span>
				<a title="BibTeX Citation" href="gamelab.bib"><i class="fa fa-bookmark"></i></a>
			</span>
		</nav>
		<article>
			<p>
				<span class="nm">Gamelab</span> is an online game theory laboratory where participants assign mixed strategies
				to game bimatrices over a series of rounds, accumulating payoffs as the experiment progresses.
				The mission of <span class="nm">gamelab</span> is to allow for laboratory-style interaction within the
				need for a laboratory.
			</p>
			<p>
				This is the operator's manual for <span class="nm">gamelab</span>.
				It is roughly divided into sections for installing the <a href="#server">server</a> itself and the <a
					href="#administration">administration</a> of experiments.
			</p>
			<nav>
				<ul>
					<li>
						<a href="#server">Server</a>
						<ul>
							<li><a href="#environment">Environment</a></li>
							<li><a href="#dependencies">Dependencies</a></li>
							<li><a href="#compiling">Compiling</a></li>
							<li><a href="#installation">Installation</a></li>
						</ul>
					</li>
					<li>
						<a href="#administration">Administration</a>
						<ul>
							<li><a href="#firstlogin">First Login</a></li>
							<li><a href="#firstexperiment">First Experiment</a></li>
							<li><a href="#runningexperiments">Running Experiments</a></li>
							<li><a href="#analysingexperiments">Analysing Experiments</a></li>
						</ul>
					</li>
				</ul>
			</nav>
			<section id="intro">
				<h2>Introduction</h2>
				<p>
					<span class="nm">Gamelab</span> is an online laboratory for conducting game theory experiments.
					Experiments consist of an experimenter, an experiment configuration, participants, and a set of games.
					The system is fully web-based and tailored for desktop and mobile devices.
				</p>
				<figure id="prog">
					<span class="term"><span></span>Configure</span>
					<span><i class="fa fa-fw fa-arrow-right"></i></span>
					<span class="term"><span></span>Deploy</span>
					<span><i class="fa fa-fw fa-arrow-right"></i></span>
					<span class="term"><span></span>Game-play</span>
					<span><i class="fa fa-fw fa-arrow-right"></i></span>
					<span class="term"><span></span>Lottery</span>
				</figure>
				<p>
					The experiment is conducted over a configuration: a sequence of rounds during which participants submit
					strategy mixtures to the given games.
					Once the experimenter deploys the experiment, players can log in and play, and rounds advance according
					to time or by the number of players who have played within a round.
					When the round advances, players earn points by computing the payoff from their submitted strategies
					against the average mixture submited by participants playing the opponent player role.
					After the last round, players' points earn lottery tickets, and winners are drawn by selecting lottery
					tickets.
				</p>
				<section id="participants">
					<h3>Participants</h3>
					<p>
						Experiment participants are identified by an e-mail address, or in <q>captive</q> configurations
						(wherein participants register on-the-spot), by an opaque identifier.
						Your game can have as many participants as the server (or the experimenter!) can handle.
						In general, the more the merrier.
					</p>
					<p>
						Participants join the system by being assigned by the experimenter or by assigning themselves in
						a captive configuration: the experimenter chooses which (or a combination of both) during
						experiment preparation.
						In the former case, participants are e-mailed a password and login credentials when the
						experimenter begins the experiment.
						These participants can log in and log out over the course of the experiment.
						In the latter case, participants are not e-mailed, and are assumed to be <q>captive</q> for the
						duration of the experiment.
					</p>
					<p>
						When the experiment begins, participants are randomly assigned a player role per game.
						This defines whether the participant plays as the row or column player.
						Experiments always have an equal assignment of row and column players unless the total number of
						players is odd, in which case the extra player is assigned a random role.
					</p>
					<p>
						<strong>Note</strong>: beyond their e-mail (as given), game-play, and the browser's reported
						<q>user-agent</q>, no personal data for participants is retained by the system.
					</p>
				</section>
				<section>
					<h3>Games</h3>
					<p>
						A game in <span class="nm">gamelab</span> is simply a payoff bi-matrix.
						There is no limit to the number of strategies for this matrix; however, in practise, only so
						many columns fit neatly on a small screen.
						Games larger than four or five strategies wide will look funny.
						Each experiment can have as many games as desired.
						Payoffs are real-valued, or more specifically, rationally-valued numbers.
						They are internally represented as fractions so there is no round-off during computation.
					</p>
				</section>
				<section>
					<h3>Game-play</h3>
					<p>
						Once the experimenter deploys the experiment, participants can submit game-plays, one per game
						per round.
						A game-play consists of a strategy mixture: a set of probabilities assigned to each of the
						player role's strategies.
						The submitted probabilities are non-negative and rationally-valued, and always sum to one.
						Participants submit these probabilites by clicking on rows in the game matrix (players appear to
						play the row player regardless of their player role) and entering in a decimal or rational
						number corresponding to the strategy.
						Decimals may have at most four digits of precision (thousandths).
					</p>
					<p>
						Participants can only play one game at a time, and each game only once per round.
						If they log out and log back in (obviously they must be non-captive players), then the last game
						to play is displayed (assuming the round has not advanced in the meantime).
						Game matrices have their rows and columns randomly shuffled between participants, making it
						slightly more difficult to compare strategies.
						Moreover, the order in which games are displayed is randomised between participants.
					</p>
					<p>
						At the conclusion of each round, players who have submitted mixtures for all games have their
						payoffs computed as points.
						(Rounds with incomplete games yield zero points.)
						Points are computed by playing the participant's mixture against the average mixture of
						participants in the opposing player role.
						Only opposing role participants who have played all games are considered.
						The points are then computed from the game payoffs.
						All of these calculations are over rational numbers and are unaffected by rounding.
						If not enough participants have played in a given player role, no points are tallied for the
						round.
					</p>
					<p>
						After the first round, participants can review the full history of play.
						This includes the history of their own strategy mixture, the average opponent role mixture, and
						the participant role's average mixture.
						Moreover, it includes the participant's accumulation of points, points per round, and the
						hypothetical points per round of playing pure strategies.
					</p>
				</section>
				<section>
					<h3>Lottery</h3>
					<p>
						When all rounds have concluded, the experiment accepts no more plays.
						Participants may still log in and review the history, as well as see the total number of points
						awarded and their lottery ticket allotment.
					</p>
					<p>
						The experimenter may then trigger the lottery from the administration console.
						This consists of seeding a deterministic random number generator with a given value.
						Each of these values is mapped into the lottery tickets to choose a winner.
						A participant is only chosen once for winning: if the random number re-selects a participant,
						a new number is drawn (rejection sampling).
					</p>
					<p>
						Upon triggering winner selection, winner participants are notified on their login screen, along
						with the lottery ticket causing the win.
						This is for transparency of the winner selection.
						Non-winning participants are also notified.
					</p>
				</section>
			</section>
			<section id="server">
				<h2>Server</h2>
				<p>
					The <span class="nm">gamelab</span> server is a CGI application that runs under any CGI-compatible web
					server on a modern UNIX system.
					In order to use <span class="nm">gamelab</span>, you'll need to download, configure, and install
					it&mdash;just like any piece of software.
					If a system administrator has already installed the server and given you the web address for its
					laboratory and administrative interfaces, jump down to the <a href="#administration">Administration</a>
					section.
				</p>
				<p>
					If at any time you have problems during an installation, or you encounter confusing language, please
					e-mail <a href="mailto:kristaps@kcons.eu">Kristaps</a> with the issue.
				</p>
				<section id="environment">
					<h3>Environment</h3>
					<p>
						To operate a <span class="nm">gamelab</span> server, you'll need a modern UNIX system with a web
						server accessable to your participants.
						I don't discuss web server deployment in this manual: please consult your operating system
						documentation on how to do so.
						Specifically, you'll want to research on how to enable CGI scripts (<em>not</em> FastCGI).
					</p>
					<p>
						To date, <span class="nm">gamelab</span> has been deployed on Mac OS X, GNU/Linux, and a number
						of BSD systems.
						It has been run under the <a href="https://httpd.apache.org/">Apache</a> web server, 
						<a href="http://nginx.org/">nginx</a> via <a
							href="http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man8/slowcgi.8">slowcgi(8)</a>,
						and OpenBSD's <a
							href="http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man8/httpd.8">httpd(8)</a> via
						<a href="http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man8/slowcgi.8">slowcgi(8)</a>.
						The system is designed to run in a <q>jail</q> as is the default with OpenBSD <a
							href="http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man8/httpd.8">httpd(8)</a>.
						You are encouraged to do the same in any environment for security reasons; however, the system
						will also run fine in a non-jail context.
					</p>
					<p>
						Note that several newer web servers only work with FastCGI scripts.
						<span class="nm">Gamelab</span> does not run under FastCGI (yet), so you'll need to install the
						appropriate proxy for a CGI script.
					</p>
				</section>
				<section id="dependencies">
					<h3>Dependencies</h3>
					<p>
						With your environment prepared, you'll need to download the <span class="nm">gamelab</span>
						source code as well as its dependencies.
						These are <i>compile-time</i> dependencies, so if the system compiles, it will run just fine.
						There are no additional run-time dependencies.
						The dependencies consist of the following:
					</p>
					<ul>
						<li><a href="http://kristaps.bsd.lv">kcgi</a> (the CGI framework),</li>
						<li><a href="https://gmplib.org">GMP</a> (rational number library),</li>
						<li><a href="https://sqlite.org">SQLite</a> (database), and</li>
						<li><a href="http://libbsd.freedesktop.org/wiki/">libbsd</a> (Linux compatibility, if applicable), and</li>
						<li><a href="http://curl.haxx.se/libcurl/">libcURL</a> (e-mailing).</li>
					</ul>
					<p>
						Each of these systems has its own installation procedure beyond the scope of this document.
						After you've installed the dependencies, download <a
							class="file" href="snapshots/gamelab.tgz">gamelab.tgz</a> and the checksum <a
							class="file" href="snapshots/gamelab.tgz.sha512">gamelab.tgz.sha512</a>.
					</p>
				</section>
				<section id="compiling">
					<h3>Compiling</h3>
					<p>
						Move the <span class="nm">gamelab</span> source code into a source directory (we suggest <span
							class="file">~/Source</span> or <span class="file">~/src</span> and unpack.
						First, however, verify the checksum.
						These instructions are valid for new installations and for upgrades: the source archive will
						unpack as <span class="file">gamelab-MAJOR-MINOR-BUILD</span>, so you won't overwrite previous
						installations on upgrading.
					</p>
					<p>
						<kbd>openssl dgst -sha512 gamelab.tgz | cmp - gamelab.tgz.sha512</kbd>
						<br />
						<kbd>tar zxf gamelab.tgz &amp;&amp; rm -f gamelab.tgz</kbd>
					</p>
					<p>
						Once you've unpacked the source code, you need to compile the server.
						Begin by editing the <span class="file">Makefile</span> to your specifications: these will
						hard-code a configuration that will define run-time operation, e.g., paths and filenames.
					</p>
					<dl>
						<dt><code>PREFIX</code></dt>
						<dd>
							Convenience variable for defining other variables.
							This is not used during operation.
						</dd>
						<dt id="htdocs"><code>HTDOCS</code></dt>
						<dd>
							This is a path used for installing read-only <q>static</q> pages, like CSS,
							JavaScript, and some HTML.
							This is usually the <q>htdocs</q> directory for your web server.
							In most web servers, this defaults to <span class="file">/var/www/htdocs</span>.
							It must be accessable (i.e., mapped) by the web server process.
						</dd>
						<dt><code>HTURI</code></dt>
						<dd>
							This is the URI location of the <a href="#htdocs"><code>HTDOCS</code></a> variable.
							In most web servers, this defaults to <span class="file">/</span> (the root).
						</dd>
						<dt id="cgibin"><code>CGIBIN</code></dt>
						<dd>
							This is the path used for installing compiled (executable) CGI binaries.
							This is usually the <q>cgibin</q> directory for your web server.
							In most web servers, this defaults to <span class="file">/var/www/cgi-bin</span>.
							It must be accessable (i.e., mapped) by the web server process.
						</dd>
						<dt id="adminuri"><code>ADMINURI</code></dt>
						<dd>
							This is the administrative CGI URI relative to the server root.
							It will correspond to the mapped location of <a href="#cgibin"><code>CGIBIN</code></a>
							plus the script name.
						</dd>
						<dt id="laburi"><code>LABURI</code></dt>
						<dd>
							This is the player (laboratory) CGI URI relative to the server root.
							It will correspond to the mapped location of <a href="#cgibin"><code>CGIBIN</code></a>
							plus the script name.
						</dd>
						<dt id="datadir"><code>DATADIR</code></dt>
						<dd>
							This is the path used for installing read-only data files.
							This doesn't have a standard location.
							We recommend using <span class="file">/var/www/data</span>.
							It <strong>must not</strong> be accessable by the web server process&mdash;only the
							running CGI processes.
						</dd>
						<dt><code>RDATADIR</code></dt>
						<dd>
							This is the path used by the running CGI process to find <a
								href="#datadir"><code>DATADIR</code></a>.
							This is because the running process may be jailed in a file-system (such as <span
								class="file">/var/www</span>) and the absolute path of <a
								href="#datadir"><code>DATADIR</code></a> may not be available.
						</dd>
						<dt><code>LIBS</code></dt>
						<dd>
							If you're going to statically link (see <a href="#static"><code>STATIC</code></a>) then
							you may need to define extra libraries to satisfy your compiler.
							This really depends on the operating system.
							For OpenBSD, you'll need to define <code>-lintl -liconv</code>.
							For non-static compilations, you probably don't need anything here.
						</dd>
						<dt id="static"><code>STATIC</code></dt>
						<dd>
							If you're going to run in a file-system jail and don't want to import dynamic libraries,
							you can statically compile the <span class="nm">gamelab</span> executable by specifying
							<code>-static</code>.
						</dd>
					</dl>
					<p>
						Sample variables are set for a local Mac OS X installation (non-static in one's <span
							class="file">~/Sites</span> directory) and OpenBSD production (static in a named
						subdirectory of the usual installation locations).
					</p>
					<p>
						Once you've defined these variables, compile the software in the usual way by executing
						<kbd>make</kbd>.
					</p>
				</section>
				<section id="installation">
					<h3>Installation</h3>
					<p>
						Once you've <a href="#compiling">compiled</a> the software and configured its parameters, you
						can install it by simply running <kbd>make install</kbd>.
						You'll probably need to do <kbd>sudo make install</kbd>, however.
					</p>
					<p>
						<strong>Warning</strong>: this will overwrite any existing database!
						To update an existing installation (assuming the database hasn't changed&mdash;the release notes
						for each version will tell you), use <kbd>make update</kbd> or <kbd>sudo make update</kbd>.
						I <strong>do not</strong> recommend this, as it's easy to miss a small database change.
					</p>
					<p>
						Both of these steps will install the following.
					</p>
					<dl>
						<dt><span class="file">admin</span></dt>
						<dt><span class="file">admin.cgi</span></dt>
						<dd>
							The administrative CGI executable installed into <a
								href="#cgibin"><code>CGIBIN</code></a>.
							These files are identical but for the suffix.
							These must resolve to <a href="#adminuri"><code>ADMINURI</code></a>.
						</dd>
						<dt><span class="file">lab</span></dt>
						<dt><span class="file">lab.cgi</span></dt>
						<dd>
							The laboratory CGI executable installed into <a href="#cgibin"><code>CGIBIN</code></a>.
							These files are identical but for the suffix.
							These must resolve to <a href="#laburi"><code>LABURI</code></a>.
						</dd>
						<dt><span class="file">adminhome.css</span></dt>
						<dt><span class="file">adminhome.js</span></dt>
						<dt><span class="file">adminlogin.html</span></dt>
						<dt><span class="file">playerautoadd.html</span></dt>
						<dt><span class="file">playerhome.css</span></dt>
						<dt><span class="file">playerhome.js</span></dt>
						<dt><span class="file">playerhome.html</span></dt>
						<dt><span class="file">playerlogin.html</span></dt>
						<dt><span class="file">privacy.html</span></dt>
						<dt><span class="file">style.css</span></dt>
						<dt><span class="file">script.js</span></dt>
						<dd>
							These statically-served, read-only files are installed into <a
								href="#htdocs"><code>HTDOCS</code></a>.
						</dd>
						<dt><span class="file">addplayer.eml</span></dt>
						<dt><span class="file">adminhome-new.html</span></dt>
						<dt><span class="file">adminhome-started.html</span></dt>
						<dt><span class="file">backupfail.eml</span></dt>
						<dt><span class="file">backupsuccess.eml</span></dt>
						<dt><span class="file">test.eml</span></dt>
						<dd>
							These read-only files are installed into <a href="#datadir"><code>DATADIR</code></a>.
							They are used by the CGI processes to serve content to data requests.
						</dd>
					</dl>
					<p>
						If you run <kbd>make install</kbd> (instead of <kbd>make update</kbd>), the following will also
						be installed.
					</p>
					<dl>
						<dt><span class="file">gamelab.db</span></dt>
						<dd>
							The writable database file itself, installed into <a
								href="#datadir"><code>DATADIR</code></a>.
							This is initialised to the defaults described in the <a
								href="#administration">Administration</a> section.
						</dd>
					</dl>
					<p>
						<strong>Note</strong>: the SQLite database system usually needs access to a <a
							href="https://www.sqlite.org/c3ref/temp_directory.html">temporary directory</a> for
						journalling and so forth.
						If you're running in a file-system jail (e.g., OpenBSD), you'll need to make sure this
						directory exists in the root of the jai.
						On default installations, this consists of a <span class="file">tmp</span> directory in the
						document root, e.g., <span class="file">/var/www/tmp</span>, with world-writable permissions.
					</p>
					<p>
						<strong>Note</strong>: if you're running in a file-system jail, the security measures of <a
							href="http://kristaps.bsd.lv/kcgi">kcgi</a> on OpenBSD (or any <a
							href="http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man4/systrace.4">systrace(4)</a>
						system) require a systrace device in the <span class="file">dev</span> directory of the document
						root, e.g., <span class="file">/var/www/dev</span>.
						Moreover, the file-system of this directory must not be <code>nodev</code> in its mount options
						(see <a
							href="http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man8/mount.8">mount(8)</a>).
					</p>
					<p>
						Once you've deployed your system, you can test it by going to the administration site.
					</p>
				</section>
			</section>
			<section id="administration">
				<h2>Administration</h2>
				<p>
					In this section, I describe how to administer the <span class="nm">gamelab</span> system.
					I assume that you've just installed it following the <a href="#installation">Installation</a> section.
					Let's assume that a system administrator has installed <span class="nm">gamelab</span> already.
					I'll use screenshots from the <a class="http://getfirefox.org">Firefox</a> web browser installed on Mac
					OS X.  Your system may not look like this&mdash;that's ok.
				</p>
				<p>
					<span class="nm">Gamelab</span> experiments consist of a series of games (normal form bimatrices) played
					by a set of participants over a finite number of rounds of a certain amount of time.
					When the experiment is over, you run a lottery that selects a participant as a winner of the experiment.
					Thus, to run an experiment, you'll need players, games, and a duration of time split into rounds.
				</p>
				<p>
					You can only run one experiment at a time on each <span class="nm">gamelab</span> installation.
					However, you can back up and wipe the experiment installation database&mdash;starting over&mdash;at any
					time to start over.
				</p>
				<section id="firstlogin">
					<h3>First Login</h3>
					<p>
						Begin by accessing the administrator URL with your browser.
						This will usually look like <span class="url">http://foo.com/cgi-bin/admin</span>, but it
						depends on how your system administrator has configured the system.
						You will be taken to a page prompting for an e-mail and password.
						<strong>Note</strong>: you'll need to configure your browser to accept cookies and run
						JavaScript for the domain upon which <span class="nm">gamelab</span> is running.
					</p>
					<figure>
						<a href="screen-admin1.png"><img src="screen-admin1.png" alt="Administrator Login" /></a>
					</figure>
					<p>
						The default e-mail address is <samp>foo@example.com</samp> and the default password is
						<samp>foobar</samp>.
						If the system has been properly configured, you'll be logged in.
						<strong>Note</strong>: you can log out at any time by clicking the navigation bars in the upper
						left-hand corner, then selecting <q>Logout</q>.
					</p>
					<p>
						The first thing you should do upon logging in is change the administrator e-mail address and password.
						Set the administrator e-mail to be your own e-mail address and the password to something fairly
						complicated.
						You'll be logged out&mdash;and must log back in&mdash;after each step.
						Make sure that no participants will be able to guess (or know) your credentials!
					</p>
					<figure>
						<a href="screen-admin2.png"><img src="screen-admin2.png" alt="Administrator Homepage" /></a>
					</figure>
					<p>
						The next step is e-mail configuration.
						<span class="nm">Gamelab</span> uses e-mail to notify participants of events.
						You won't be able to use the system properly without it!
						You may need your system administrator's help, but you should be able to enter the same information as
						when you configure your e-mail reader: 
						the <q>from</q> address the e-mails will use (usually your own so that they can respond to you);
						the outgoing (SMTP) e-mail server in the form <samp>smtp://foo.bar:587</samp>; 
						and the user and password for accessing that server.
						<span class="nm">Gamelab</span> won't work for non-secure (i.e., non-TLS) e-mail access.
					</p>
					<figure>
						<a href="screen-admin3.png"><img src="screen-admin3.png" alt="Administrator Homepage" /></a>
					</figure>
					<p>
						When you're finished entering this information, test the configuration.
						You should receive an e-mail in a few minutes from the <span class="nm">gamelab</span> server.
					</p>
				</section>
				<section id="firstexperiment">
					<h3>First Experiment</h3>
					<p>
						Now that you've set your e-mail and administrator credentials as described in <a
							href="#firstlogin">First Login</a>, you're ready to configure an experiment.
						Don't worry&mdash;you don't need to start your experiment immediately.
						You can slowly add the players and games you want until you're ready to deploy the experiment
						itself.
						Start with the following.
					</p>
					<figure>
						<a href="screen-admin4.png"><img src="screen-admin4.png" alt="Administrator Homepage" /></a>
					</figure>
					<ul>
						<li>
							A set of players identified by e-mail address.
							The more, the merrier, but you'll need two at a minimum.
							Make sure the e-mail addresses are real!
							Enter these e-mails into the <q>Players</q> section.
							You'll be able to add and remove e-mails before the experiment, so no worries.
							Moreover, if you start an experiment with mistaken e-mails, you'll be able to disable them.
							If you specify <q>Allow Captive Players</q>, participants can register themselves by
							accessing the <span class="file">playerautoadd.html</span> URL.
							They are captive in the sense that their logout button is disabled and that they are
							<strong>never</strong> e-mailed, nor are they retained if the database is wiped.
							They will be shown with a special symbol.
						</li>
						<li>
							A set of normal form bimatrix games.
							These can have any number of strategies and either positive integer or rational payoffs.
							Enter these games into the <q>Games</q> section.
							Bimatrix games are laid out top-left to bottom-right.
							So let's say you have the following game shown first as a symmetric game then with the
							<span style="color: red;">implied payoffs</span> to the opponent player.
							<div id="gamepanes" class="gamepanes"><div>
									<table>
										<tr>
											<td>1</td>
											<td>0</td>
											<td>-1</td>
										</tr>
										<tr>
											<td>0</td>
											<td>-1</td>
											<td>1</td>
										</tr>
										<tr>
											<td>-1</td>
											<td>1</td>
											<td>0</td>
										</tr>
									</table>
								</div><div>
									<table>
										<tr>
											<td>1<span>, -1</span></td>
											<td>0<span>, 0</span></td>
											<td>-1<span>, 1</span></td>
										</tr>
										<tr>
											<td>0<span>, 0</span></td>
											<td>-1<span>, 1</span></td>
											<td>1<span>, -1</span></td>
										</tr>
										<tr>
											<td>-1<span>, 1</span></td>
											<td>1<span>, -1</span></td>
											<td>0<span>, 0</span></td>
										</tr>
									</table>
							</div></div>
							These would decompose into <kbd class="gamepayoffs">1 <span>-1</span> 0 <span>0</span>
								-1 <span>1</span> 0 <span>0</span> -1 <span>1</span> 1 <span>-1</span> -1
								<span>1</span> 1 <span>-1</span> 0 <span>0</span></kbd>,
							where opponent payoffs are <span style="color: red;">coloured</span>.
						</li>
						<li>
							The duration (minutes per round and rounds) that players will participate in the
							experiment.
							The round time is specified in minutes.
							It's important to factor in network lag: while one-minute experiments are certainly
							well-tested and possible, they're not realistic if people sometimes must wait for the
							page to load!
						</li>
					</ul>
					<figure>
						<a href="screen-admin5.png"><img src="screen-admin5.png" alt="Administrator Homepage" /></a>
					</figure>
					<p>
						Once you've added your games and your players, you're ready to actually deploy the experiment
						itself.
						Set the time and date when the experiment begins (<strong>remember</strong>: in GMT!) and the
						number of rounds and duration of each round.
						If you enter a non-zero percentage for the number of players per role, then the round will
						advance if enough players have played.
						For example, if set to 50%, then 50% or more players playing all games in both roles will cause
						the round to advance regardless the amount of time left.
						(If not enough players play, then round will advance by the given, and now maximum, time.)
						You can edit the instructions given to players&mdash;in fact, that's a good idea, as you
						probably want to tune the winnings.
						Then hit <q>Start</q> and you're ready to go!
					</p>
					<p>
						Once you hit the <q>Start</q> button, the experiment has begun.
						It won't be playable until the time and date you specified, but the players are notified
						immediately with their login credentials.
						Only players you add are e-mailed: auto-added players are not e-mailed.
					</p>
				</section>
				<section id="runningexperiments">
					<h3>Running Experiments</h3>
					<p>
						Once you've deployed your experiment as described in <a href="#firstexperiment">First
							Experiment</a>, you must now administer it.
						For the time being, there's very little in the way of <span class="nm">gamelab</span>
						administration.
						You can enable and disable players, reset player passwords, and reconfigure your administrator
						credentials.
					</p>
					<figure>
						<a href="screen-admin7.png"><img src="screen-admin7.png" alt="Administrator Homepage" /></a>
					</figure>
					<p>
						If a player forgets her password, you can reset it by clicking on the player's email address and
						selecting the <q>Reset Password</q> option.
						(Auto-added players are <strong>not</strong> affected.)
						You can reset all non-auto-added players' passwords with the <q>Reset All Passwords</q> option.
						If a player is misbehaving, you can disable her login by toggling the button next to her e-mail
						address.
						Once toggled, she'll no longer be able to log in.
						If she's already logged in, she'll be logged out; no plays are accepted.
					</p>
					<p>
						If you misconfigured the e-mail server and no e-mails were sent out, you can retry the failed
						e-mail attempts by re-configuring (correctly!) the server and selecting <q>Resend Error
							Mails</q>.
					</p>
					<p>
						When a game has finished, you can compute its lottery by specifying a seed for the random number
						generator and a number of lottery winners.
						<strong>Note</strong>: for the time being, only choose one!
					</p>
					<figure>
						<a href="screen-admin6.png"><img src="screen-admin6.png" alt="Administrator Homepage" /></a>
					</figure>
					<p>
						Once the winner has been chosen and notified, and the game wound down, you can wipe and start
						afresh by selecting the <q>Wipe Experiment</q> option.
						This will first back up the database (e-mailing it to you in the process), then wipe all by the
						administrator credentials, listed games, and player identities (though not their play, of
						course).
						Note that captive players are not retained if the database is wiped.
					</p>
				</section>
				<section id="analysingexperiments">
					<h3>Analysing Experiments</h3>
					<p>
						At this time, <span class="nm">gamelab</span> doesn't have any special functionality for
						analysing played (or in-flight) experiments.
						You can, however, directly access the <a href="http://sqlite.org">SQLite</a> game database by
						backing up on the administrative console.
						This will e-mail a redacted database to the administrator.
						The redacted bits consist of user and administrator e-mail passwords.
					</p>
					<figure>
						<a href="gamelab.png"><img class="shadow" src="gamelab.png" alt="Gamelab Schema" /></a>
					</figure>
					<p>
						The database schema is fairly straightforward.
						It consists of the following tables.
						In all of these, note that <q>Unique Identifier</q> fields are non-zero SQLite <q>rowid</q> fields.
						Rational numbers are stored as text, such as <var>1/2</var> or just <var>2</var>, starting with
						<var>0/1</var>.
					</p>
					<dl>
						<dt id="db-winner"><code>winner</code></dt>
						<dd>
							<p>
								The <code>winner</code> table consists of rows corresponding to a player and her
								winner status.
								This table does not exist until the <a
									href="db-experiment-status"><var>status</var></a> field of the <a
									href="#db-experiment"><code>experiment</code></a> is set to
								<var>3</var>.
								This table is deleted when the database is wiped.
							</p>
							<dl>
								<dt id="db-winner-playerid"><var>playerid</var></dt>
								<dd>A foreign key reference to the <a href="#db-player"><code>player</code></a> table.</dd>
								<dt id="db-winner-winner"><var>winner</var></dt>
								<dd>
									Boolean value as to whether the player is a winner.
									If this is <var>false</var>, then the <a
										href="#db-winner-winrank"><var>winrank</var></a> and
									<a href="#db-winner-rnum"><var>rnum</var></a> columns are undefined.
								</dd>
								<dt id="db-winner-winrank"><var>winrank</var></dt>
								<dd>If the player is a winner, the rank (first, second, third draw...) of their winning.</dd>
								<dt id="db-winner-rnum"><var>rnum</var></dt>
								<dd>
									The random number modulo the total number of tickts used for this winning draw.
									In other words, this is the winning lottery ticket.
								</dd>
								<dt id="db-winner-id"><var>id</var></dt>
								<dd>Unique identifier.</dd>
							</dl>
						</dd>
						<dt id="db-player"><code>player</code></dt>
						<dd>
							<p>
								The central <code>player</code> table consists of all participants.
								The <a href="#db-player-hash"><var>hash</var></a> variable is redacted when the
								experiment is wiped.
							</p>
							<dl>
								<dt id="db-player-autoadd"><var>autoadd</var></dt>
								<dd>
									Player was auto-added (i.e., auto-added herself).
									These players are never e-mailed.
								</dd>
								<dt id="db-player-email"><var>email</var></dt>
								<dd>Player e-mail address.  This is unique in the set of all players.</dd>
								<dt id="db-player-state"><var>state</var></dt>
								<dd>
									The state of a player can be <var>0</var>, meaning the player is
									newly-added and has no password; <var>1</var> when the player has been
									mailed her password; <var>2</var>, the player has logged in; and
									<var>3</var>, an error occured when the password e-mail was attempted.
								</dd>
								<dt id="db-player-enabled"><var>enabled</var></dt>
								<dd>Whether a player is allowed to login during an experiment.</dd>
								<dt id="db-player-rseed"><var>rseed</var></dt>
								<dd>A non-zero cryptographically random number given to the player when created.</dd>
								<dt id="db-player-role"><var>role</var></dt>
								<dd>The player role (<var>0</var> for row player, <var>1</var> for column
									player) set when the <a
										href="#db-experiment"><code>experiment</code></a> <a
										href="#db-experiment-state"><var>state</var></a> is
									&gt;0.</dd>
								<dt id="db-player-rank"><var>rank</var></dt>
								<dd>The index of the player in the sequence of all players sorted by <a
										href="#db-player-rseed"><var>rseed</var></a> and (if
									non-unique) <a href="#db-player-id"><var>id</var></a>.  
									This is set when the <a
										href="#db-experiment"><code>experiment</code></a> <a
										href="#db-experiment-state"><var>state</var></a> is
									&gt;0.</dd>
								<dt id="db-player-instr"><var>instr</var></dt>
								<dd>Whether the player should be shown instructions when she logs in (versus
									being taken directly to the game-play tab).</dd>
								<dt id="db-player-finalrank"><var>finalrank</var></dt>
								<dd>The minimum of the slot of the player's tickets among all players' tickets.
									For example, given 100 players with roughly 10 tickets each, this might
									be <var>543</var> to indicate that slot <var>543</var> to <var>543</var>
									plus <a href="#db-player-finalscore"><var>finalscore</var></a> are this
									player's slots in the lottery.</dd>
								<dt id="db-player-finalscore"><var>finalscore</var></dt>
								<dd>Set to the accumulated payoffs from the <a
										href="#db-lottery"><code>lottery</code></a> <a
										href="#db-lottery-aggrpayoff"><var>aggrpayoff</var></a>
									rounded up to the nearest integer.</dd>
								<dt id="db-player-hash"><var>hash</var></dt>
								<dd>The player's password set when the experiment is started (i.e., when the <a
										href="#db-experiment"><code>experiment</code></a> <a
										href="#db-experiment-state"><var>state</var></a> is &gt;0) or
									when reset. <strong>Note</strong>: this is stored in the clear: it is
									not (yet) a hash.</dd>
								<dt id="db-player-id"><var>id</var></dt>
								<dd>Unique identifier.</dd>
							</dl>
						</dd>
						<dt id="db-lottery"><code>lottery</code></dt>
						<dd>
							<p>
								A lottery is created for an individual <a
									href="#db-player"><code>player</code></a> when that player has been
								granted <a href="#db-payoff"><code>payoff</code></a> for all <a
									href="#db-game"><code>game</code></a> rows in a round.
							</p>
							<dl>
								<dt id="db-lottery-round"><var>round</var></dt>
								<dd>The round number (starting at zero).</dd>
								<dt id="db-lottery-playerid"><var>playerid</var></dt>
								<dd>A foreign key reference to the <a href="#db-player"><code>player</code></a>
									<a href="#db-player-id"><var>id</var></a>.</dd>
								<dt id="db-lottery-aggrpayoff"><var>aggrpayoff</var></dt>
								<dd>The player's aggregate payoff (as a rational number) computing by adding the
									previous round's aggregate payoff to the current <a
										href="#db-lottery-curpayoff"><var>curpayoff</var></a>.</dd>
								<dt id="db-lottery-curpayoff"><var>curpayoff</var></dt>
								<dd>The player's current payoff (as a rational number) computing by accumulating
									her <a href="#db-payoff"><code>payoff</code></a> <a
										href="#db-payoff-payoff"><var>payoff</var></a> for all
									games in the experiment.
									This is set to <var>0/1</var> if the player has not played all
									games.</dd>
								<dt id="db-lottery-id"><var>id</var></dt>
								<dd>Unique identifier.</dd>
							</dl>
						</dd>
						<dt id="db-gameplay"><code>gameplay</code></dt>
						<dd>
							<p>
								During a given round, this records a <a
									href="#db-player"><code>player</code></a>'s status in terms of number of
								<a href="#db-choice"><code>choice</code></a> rows (plays) made.
							</p>
							<dl>
								<dt id="db-gameplay-round"><var>round</var></dt>
								<dd>The round number (starting at zero).</dd>
								<dt id="db-gameplay-choices"><var>choices</var></dt>
								<dd>The number of games this player has played, i.e., the count of <a
										href="#db-choice"><code>choice</code></a> rows.</dd>
								<dt id="db-gameplay-playerid"><var>playerid</var></dt>
								<dd>A foreign key reference to the <a href="#db-player"><code>player</code></a>
									<a href="#db-player-id"><var>id</var></a>. When this equals the number
									of games, the player has played all games for a round.</dd>
								<dt id="db-gameplay-id"><var>id</var></dt>
								<dd>Unique identifier.</dd>
							</dl>
						</dd>
						<dt id="db-payoff"><code>payoff</code></dt>
						<dd>
							<p>
								When the given round has completed, this consists of the payoff of the player's
								<a href="#db-choice"><code>choice</code></a> strategy mix for a given <a
									href="#db-game"><code>game</code></a> when played against the average
								strategy of the opposing player role.
							</p>
							<dl>
								<dt id="db-payoff-round"><var>round</var></dt>
								<dd>The round number (starting at zero).</dd>
								<dt id="db-payoff-playerid"><var>playerid</var></dt>
								<dd>A foreign key reference to the <a href="#db-player"><code>player</code></a>
									<a href="#db-player-id"><var>id</var></a>. When this equals the number
									of games, the player has played all games for a round.</dd>
								<dt id="db-payoff-gameid"><var>gameid</var></dt>
								<dd>A foreign key reference to the <a href="#db-game"><code>game</code></a>
									<a href="#db-game-id"><var>id</var></a>.</dd>
								<dt id="db-payoff-payoff"><var>payoff</var></dt>
								<dd>A rational number of the payoff.</dd>
								<dt id="db-payoff-id"><var>id</var></dt>
								<dd>Unique identifier.</dd>
							</dl>
						</dd>
						<dt id="db-choice"><code>choice</code></dt>
						<dd>
							<p>
								A strategy mixture created when a <a href="#db-player"><code>player</code></a>
								plays a round in a <a href="#db-game"><code>game</code></a>.
							</p>
							<dl>
								<dt id="db-choice-round"><var>round</var></dt>
								<dd>
									The round number (starting at zero).
								</dd>
								<dt id="db-choice-sessid"><var>sessid</var></dt>
								<dd>
									The <a href="#db-sess"><code>sess</code></a> used when submitting this choice mixture.
								</dd>
								<dt id="db-choice-created"><var>created</var></dt>
								<dd>
									The epoch timestamp when this choice was made.
								</dd>
								<dt id="db-choice-strats"><var>strats</var></dt>
								<dd>
									A text (space-separated) list of rational numbers of the strategy mixture
									ordered from the top if a row-playing <a
										href="#db-player-role"><var>role</var></a> or left if a
									column-player.
								</dd>
								<dt id="db-choice-stratsz"><var>stratsz</var></dt>
								<dd>
									Number of entries in <a href="#db-choice-strats"><var>strats</var></a>.
									This obviously equals the number of strategies available to the player
									in that <a href="#db-game"><code>game</code></a>, given the player <a
										href="#db-player-role"><var>role</var></a>.
								</dd>
								<dt id="db-choice-playerid"><var>playerid</var></dt>
								<dd>
									A foreign key reference to the <a href="#db-player"><code>player</code></a>
									<a href="#db-player-id"><var>id</var></a>.
								</dd>
								<dt id="db-choice-gameid"><var>gameid</var></dt>
								<dd>
									A foreign key reference to the <a href="#db-game"><code>game</code></a>
									<a href="#db-game-id"><var>id</var></a>.
								</dd>
								<dt id="db-choice-id"><var>id</var></dt>
								<dd>Unique identifier.</dd>
							</dl>
						</dd>
						<dt id="db-experiment"><code>experiment</code></dt>
						<dd>
							<p>
								This describes an experiment configured by the experimenter.
								There is always one (and only one) row in this table.
								It is initialised to default values.
							</p>
							<dl>
								<dt id="db-experiment-autoadd"><var>autoadd</var></dt>
								<dd>The experiment is currently accepting (or did accept) auto-added players.</dd>
								<dt id="db-experiment-state"><var>state</var></dt>
								<dd>The running state of the experiment, being either <var>0</var>, for new
									(still in the configuration stage); <var>1</var>, for started (players
									can log in, though the experiment itself may not be accepting plays
									yet); <var>2</var>, where the experiment has expired, but the winner has
									not been chosen by the experimenter; or <var>3</var>, where the
									experiment has expired and the winner has been chosen.</dd>
								<dt id="db-experiment-start"><var>start</var></dt>
								<dd>An epoch-encoded (seconds) time and date when the experiment when the first
									round of the experiment begins.</dd>
								<dt id="db-experiment-end"><var>end</var></dt>
								<dd>An epoch-encoded (seconds) time and date when the experiment when the last
									round of the experiment concludes.  This also corresponds to the
									starting time plus the number of rounds times round duration.</dd>
								<dt id="db-experiment-round"><var>round</var></dt>
								<dd>
									The current round of the experiment, or -1 if the rounds have not begun incrementing.
									This will be set to <a
										href="#db-experiment-rounds"><var>rounds</var></a> when the
									experiment concludes.
								</dd>
								<dt id="db-experiment-roundbegan"><var>roundbegan</var></dt>
								<dd>
									If <a href="#db-experiment-round"><var>round</var></a> is non-negative,
									then the timestamp (epoch) when the round was incremented.
									Otherwise, this is zero.
								</dd>
								<dt id="db-experiment-roundpct"><var>roundpct</var></dt>
								<dd>
									If &gt;0, this represents the fraction of players per role who play all
									games and determine that the round automatically advances.
									In other words, if set to 0.5 (50%), then from both player roles, if 50%
									or more players have played all games, the round advances in advance of
									the set round termination time.
								</dd>
								<dt id="db-experiment-rounds"><var>rounds</var></dt>
								<dd>The number of rounds that will be played.  Minimum of one.</dd>
								<dt id="db-experiment-minutes"><var>minutes</var></dt>
								<dd>The number of minutes per round.  Minimum of one.</dd>
								<dt id="db-experiment-loginuri"><var>loginuri</var></dt>
								<dd>Set when the experiment begins (i.e., when <a
										href="#db-experiment-state"><var>state</var></a> &gt;0), this is
									the URL given to players in their initial e-mail for when they log in.
									This is suffixed by
									<code>?email=EMAIL&amp;password=PASSWORD</code>.</dd>
								<dt id="db-experiment-instr"><var>instr</var></dt>
								<dd>The instructions shown to players.  This must contain valid HTML5.  It may
									contain <code>@@gamelab-admin-email@@</code>, which is filled in with
									the experimenter's configured e-mail address;
									<code>@@gamelab-games@@</code> for the number of games;
									<code>@@gamelab-rounds@@</code> for the number of rounds; and
									<code>@@gamelab-round-time@@</code>, a decimal number of the number of
									hours per round.</dd>
								<dt id="db-experiment-total"><var>total</var></dt>
								<dd>When the experiment finishes (i.e., when <a
										href="#db-experiment-state"><var>state</var></a> is set to 2),
									this is filled in with the total number of lottery tickets (the <a
										href="#db-player-finalscore"><var>finalscore</var></a>) awarded to
									all players.</dd>
								<dt id="db-experiment-id"><var>id</var></dt>
								<dd>Unique identifier.</dd>
							</dl>
						</dd>
						<dt id="db-game"><code>game</code></dt>
						<dd>
							<p>
								A game is a payoff bimatrix configured by the experimenter.
								There may be any non-zero number of games in a running experiment.
							</p>
							<dl>
								<dt id="db-game-p1"><var>p1</var></dt>
								<dd>The number of strategies for the row player.</dd>
								<dt id="db-game-p2"><var>p2</var></dt>
								<dd>The number of strategies for the column player.</dd>
								<dt id="db-game-payoffs"><var>payoffs</var></dt>
								<dd>A list of payoffs from the top-left to the bottom-right of the payoff
									matrix, ordered row-player payoff, column-player payoff.
									See <a href="#firstexperiment">First Experiment</a> configuration for
									more.</dd>
								<dt id="db-game-name"><var>name</var></dt>
								<dd>The name of the experiment.  This is shown only to the experimenter.</dd>
								<dt id="db-game-id"><var>id</var></dt>
								<dd>Unique identifier.</dd>
							</dl>
						</dd>
						<dt id="db-sess"><code>sess</code></dt>
						<dd>
							<p>
								A session.
								Sessions are the usual browser session used when players (or the experimenter)
								are interacting with the system.
							</p>
							<dl>
								<dt id="db-sess-created"><var>created</var></dt>
								<dd>
									An epoch timestamp of when the session was originally created.
								</dd>
								<dt id="db-sess-cookie"><var>cookie</var></dt>
								<dd>
									A cryptographically random cookie assigned to each session.
									This is used as a security feature so that people can't guess others'
									session identifiers and re-use them.
									When a session has expired or the user is logged out, this is set to
									zero.
									(Session entries are never deleted.)
								</dd>
								<dt id="db-sess-playerid"><var>playerid</var></dt>
								<dd>
									A foreign key reference to the <a
										href="#db-player"><code>player</code></a> <a
										href="#db-player-id"><var>id</var></a>.
									For experimenter logins, this value is <var>null</var>.
								</dd>
								<dt id="db-sess-useragent"><var>useragent</var></dt>
								<dd>
									The user-agent as reported by the player's (or administrator's) browser.
									Remember: these are easy to fake, so they shouldn't be taken as
									authoritative, but suggestive.
									Also note that this is set when the player first creates the session
									(cookie), and may not reflect later plays.
									(But usually does.)
								</dd>
								<dt id="db-sess-id"><var>id</var></dt>
								<dd>Unique identifier.</dd>
							</dl>
						</dd>
						<dt id="db-admin"><code>admin</code></dt>
						<dd>
							<p>
								Administrator (a.k.a. experimenter) credentials.
								There is always one (and only one) row that exists, initialised to default
								values.
							</p>
							<dl>
								<dt id="db-admin-email"><var>email</var></dt>
								<dd>The experimenter e-mail address.  This is used as a predefined template
									value for the instructions.  It is also used as the destination for
									backups of the database.  Initialises to <code>foo@example.com</code>.</dd>
								<dt id="db-admin-hash"><var>hash</var></dt>
								<dd>The experimenter password.  <strong>Note</strong>: this is stored as
									cleartext, so it is not really a hash (yet).  Initialises to
									<code>xyzzy</code>.</dd>
								<dt id="db-admin-id"><var>id</var></dt>
								<dd>Unique identifier.</dd>
							</dl>
						</dd>
						<dt id="db-past"><code>past</code></dt>
						<dd>
							<p>
								Records the average strategy mixture of a given player role for a given round
								and <a href="#db-game"><code>game</code></a> when a round has concluded.
							</p>
							<dl>
								<dt id="db-past-round"><var>round</var></dt>
								<dd>The round starting at zero.</dd>
								<dt id="db-past-gameid"><var>gameid</var></dt>
								<dd>A foreign key reference to the <a href="#db-game"><code>game</code></a>
									<a href="#db-game-id"><var>id</var></a>.</dd>
								<dt id="db-past-averagesp1"><var>averagesp1</var></dt>
								<dd>For the row player, the accumulated weighted average strategy mixture of all
									previous rounds, with previous rounds being exponentially decayed.  That
									is, the <a href="#db-past-currentsp1"><var>currentsp1</var></a> plus
									half of the last round's weighted average and so on.
									If a round does not have enough plays by either player role to produce
									payoffs, it is omitted from the accumulation sequence.
									This is recorded as a space-separated sequence of rational numbers, one
									per strategy.</dd>
								<dt id="db-past-averagesp2"><var>averagesp2</var></dt>
								<dd>Like <a href="#db-past-averagesp1"><var>averagesp1</var></a> but for the
									column player.</dd>
								<dt id="db-past-currentsp1"><var>currentsp1</var></dt>
								<dd>For the row player, the average strategy mixture of the current round.
									Strategy mixtures are only considered for <a
										href="#db-choice"><code>choice</code></a> rows where the <a
										href="#db-player"><code>player</code></a> played all games
									for the round, so this will be a set of zeroes if no players completed
									all games.
									This is recorded as a space-separated sequence of rational numbers, one
									per strategy.</dd>
								<dt id="db-past-currentsp2"><var>currentsp2</var></dt>
								<dd>Like <a href="#db-past-currentsp1"><var>currentsp1</var></a> but for the
									column player.</dd>
								<dt id="db-past-skip"><var>skip</var></dt>
								<dd>If zero row or column players played all games, this is set to <var>1</var>,
									else it is <var>0</var> (sufficient players played).</dd>
								<dd>The accumulated count of rounds not skipping, i.e., the count of zero-valued
									<a href="#db-past-skip"><var>skip</var></a> rounds.  This is used for
									computing the accumulated weighted average, which is really the sum of
									all (non-zero) weighted previous rounds divided by the exponential
									sum.</dd>
								<dt id="db-past-id"><var>id</var></dt>
								<dd>Unique identifier.</dd>
							</dl>
						</dd>
						<dt id="db-tickets"><code>tickets</code></dt>
						<dd>
							<p>This table is not used and will be removed.</p>
						</dd>
						<dt id="db-smtp"><code>smtp</code></dt>
						<dd>
							<p>
								This consists of the SMTP server information used in sending e-mails.
								There is always only one row set, which defaults to empty values (see <a
									href="#db-smtp-isset"><var>isset</var></a>).
							</p>
							<dl>
								<dt id="db-smtp-user"><var>user</var></dt>
								<dd>The SMTP server username (used for logging in).</dd>
								<dt id="db-smtp-email"><var>email</var></dt>
								<dd>The e-mail address used as the <q>From</q> address in all communication from
									the server to players and the experimenter.
									It is usually the same as the experimenter <a
										href="#db-admin-email"><var>email</var></a> set in the <a
										href="#db-admin"><code>admin</code></a> table, but may be set as
									a standard <q>No-Reply</q>. (This is discouraged, as your players should
									be able to reply to you if things go wrong.)
								<dt id="db-smtp-pass"><var>pass</var></dt>
								<dd>The SMTP username's password (used for logging in).  <strong>Note</strong>
									that this is stored in cleartext, so make sure that your password isn't
									used elsewhere.</dd>
								<dt id="db-smtp-server"><var>server</var></dt>
								<dd>The SMTP server in <code>smtp://server:port</code> format.</dd>
								<dt id="db-smtp-isset"><var>isset</var></dt>
								<dd>Whether these entries have been set.</dd>
								<dt id="db-smtp-id"><var>id</var></dt>
								<dd>Unique identifier.</dd>
							</dl>
						</dd>
					</dl>
				</section>
			</section>
		</article>
		<footer>
			<div>
				&copy; 2015, <a href="http://www.kcons.eu"><i>k</i>-Consulting</a>
			</div>
		</footer>
	</body>
</html>
